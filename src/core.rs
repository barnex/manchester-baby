use crate::*;

pub fn run() {
    let mem = [
        0b_00000110101001000100000100000100_u32,
        0b_10011011111100100010000010001000_u32,
        0b_10000010000101101000100001010000_u32,
        0b_00000010000100110100001001100000_u32,
        0b_11101011111100011010101010010100_u32,
        0b_10000000110000010001000010101001_u32,
        0b_10000001111000010000100100001100_u32,
        0b_10000001111000010000011000000010_u32,
        0b_10011000000001101000011001000001_u32,
        0b_10101001111000100100100100000010_u32,
        0b_00000001111000110011010010000100_u32,
        0b_01101001111000010011000001001000_u32,
        0b_11101001111000010100100000110000_u32,
        0b_10101000110001101000010000110000_u32,
        0b_10100001111000010000001001001000_u32,
        0b_00010011111101100000000110000100_u32,
        0b_00000111111110010000000010000010_u32,
        0b_10000011111101101111111111111111_u32,
        0b_10101001111000100110011001100110_u32,
        0b_10101000110001101111111111111111_u32,
        0b_00011000110000001111111111111111_u32,
        0b_01100000000000000000000000000000_u32,
        0b_11100000000000000000000000000000_u32,
        0b_11111111111111111111111111111111_u32,
        0b_00000000000000000000000000000000_u32,
        0b_00000000000000011111000000100000_u32,
        0b_00000000000000100000100001010000_u32,
        0b_00000000000000100010100000100000_u32,
        0b_00000001111110100000100000111000_u32,
        0b_00000010000000011111000000100000_u32,
        0b_00011110011110001000000000100000_u32,
        0b_00111111111111111110000001010000_u32,
    ];

    let mut mem = mem.map(|v| v.reverse_bits() as i32);
    let mut pc = 0u8;
    let mut acc = 0;

    loop {
        pc += 1;
        if pc as usize >= mem.len() {
            println!("BAD PC: {pc}");
            break;
        }

        display(&mem, pc, acc);

        let (opcode, s) = decode(mem[pc as usize]);
        match opcode {
            OpCode::JMP => pc = mem[s as usize] as u8,
            OpCode::JRP => pc = pc.wrapping_add(mem[s as usize] as u8),
            OpCode::LDN => acc = -mem[s as usize],
            OpCode::STO => mem[s as usize] = acc,
            OpCode::SUB | OpCode::SUB2 => acc = acc.wrapping_sub(mem[s as usize]),
            OpCode::CMP => {
                if acc < 0 {
                    pc += 1
                }
            }
            OpCode::STOP => break,
        }
        std::thread::sleep(std::time::Duration::from_millis(1));
    }
}

#[inline]
pub fn decode(word: i32) -> (OpCode, u8) {
    let addr = (word & 0b_000_00000000_11111) as u8;
    let opcode = OpCode::from(word);
    (opcode, addr)
}
